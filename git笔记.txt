1,新建仓库：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。

2,查看状态：
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

3,回退版本：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

4,撤销修改：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
	   第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

5,删除文件：
1),git checkout -- readme.txt其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
2),命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。



1. 通过命令 git init 把这个目录变成git可以管理的仓库
2. 使用命令 git add readme.txt添加到暂存区里面去
3. 用命令 git commit告诉Git，把文件提交到仓库
4. 通过命令git status来查看是否还有文件未提交
5. git diff readme.txt看下readme.txt文件到底改了什么内容
6. git log查看下历史记录,如果嫌上面显示的信息太多的话，我们可以使用命令 git log –-pretty=oneline
7. 通过如下命令即可获取到版本号：git reflog 
8. 通过版本号回退，使用命令方法如下：git reset  –-hard 版本号
9. 丢弃工作区的修改git checkout -- readme.txt
10. 命令git checkout -- readme.txt 中的--很重要，如果没有--的话，那么命令变成创建分支了。
11. 一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt
	如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令提交掉.
12. 在版本库中恢复此文件git checkout -- b.txt
13. git remote add origin https://github.com/fxl2015/testgit20170505.git
14. 把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程
15. 只要本地作了提交，就可以通过如下命令：git push origin master把本地master分支的最新修改推送到github上了
16. 远程库已经准备好了，下一步是使用命令git clone克隆一个本地库
17. 首先，我们来创建dev分支，然后切换到dev分支上,git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
	git branch dev
	git checkout dev
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。
18. git branch master切换到主分支
19. 把dev分支上的内容合并到分支master上可以在master分支上，使用如下命令 git merge dev 
20. 总结创建与合并分支命令如下：
   查看分支：git branch
   创建分支：git branch name
   切换分支：git checkout name
创建+切换分支：git checkout –b name
合并某分支到当前分支：git merge name
删除分支：git branch –d name

21. 当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
	要查看远程库的信息 使用 git remote
	要查看远程库的详细信息 使用 git remote –v
22. 因此：多人协作工作模式一般是这样的：
	首先，可以试图用git push origin branch-name推送自己的修改.
	如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。
	如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。

Git基本常用命令如下：

   mkdir：         XX (创建一个空目录 XX指目录名)

   pwd：          显示当前目录的路径。

   git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。

   git add XX       把xx文件添加到暂存区去。

   git commit –m “XX”  提交文件 –m 后面的是注释。

   git status        查看仓库状态

   git diff  XX      查看XX文件修改了那些内容

   git log          查看历史记录

   git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本

                        (如果想回退到100个版本，使用git reset –hard HEAD~100 )

   cat XX         查看XX文件内容

   git reflog       查看历史记录的版本号id

   git checkout — XX  把XX文件在工作区的修改全部撤销。

   git rm XX          删除XX文件

   git remote add origin https://github.com/tugenhua0707/testgit 关联一个远程库

   git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库

   git clone https://github.com/tugenhua0707/testgit  从远程库中克隆

   git checkout –b dev  创建dev分支 并切换到dev分支上

   git branch  查看当前所有的分支

   git checkout master 切换回master分支

   git merge dev    在当前的分支上合并dev分支

   git branch –d dev 删除dev分支

   git branch name  创建分支

   git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作

   git stash list 查看所有被隐藏的文件列表

   git stash apply 恢复被隐藏的文件，但是内容不删除

   git stash drop 删除文件

   git stash pop 恢复文件的同时 也删除文件

   git remote 查看远程库的信息

   git remote –v 查看远程库的详细信息

   git push origin master  Git会把master分支推送到远程库对应的远程分支上


git 删除github上的文件:
硬盘删除文件后，执行$ git status 
会提示你仍然需要$ git rm <文件> 
此时如果是要删除大批量文件，这么一个一个命令下去不得累死人啊 
其实可以这样（不管之前有没有已经本地物理删除） 
执行 $ git rm * -r（记得，cd 到你要删除的目录下。当然 * 可以换成指定目录） 
这时删除文件已经进入本地缓存区， 
接下来就是正常的提交操作了
$ git add . 
$ git commit -m "clear"
$ git push origin master



$ git push origin master
Username for 'https://github.com': fxl2015
To https://github.com/fxl2015/notes.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/fxl2015/notes.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
问题解决：
本地没有update到最新版本的项目，本地直接push所以会出错。
git pull origin 更新项目
或者 
git push -f origin master





Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。
github的SSH配置如下：
一 、
设置Git的user name和email：
$ git config --global user.name "xxx"
$ git config --global user.email "xxx@xxx.com"

二、生成SSH密钥过程：
1.查看是否已经有了ssh密钥：cd ~/.ssh
如果没有密钥则不会有此文件夹，有则备份删除
2.生存密钥：
$ ssh-keygen -t rsa -C “xxx@xxx.com”
按3个回车，密码为空。

Your identification has been saved in /home/tekkub/.ssh/id_rsa.
Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
The key fingerprint is:
………………

最后得到了两个文件：id_rsa和id_rsa.pub

3.添加密钥到ssh：ssh-add 文件名
需要之前输入密码。
4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。
打开https://github.com/ ，登陆xxx，然后添加ssh。

5.测试：ssh git@github.com
The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.
ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access
Connection to github.com closed.

三、 开始使用github
1.获取源码：
$ git clone git@github.com:billyanyteen/github-services.git
2.这样你的机器上就有一个repo了。
3.git于svn所不同的是git是分布式的，没有服务器概念。所有的人的机器上都有一个repo，每次提交都是给自己机器的repo
仓库初始化：
git init
生成快照并存入项目索引：
git add
文件,还有git rm,git mv等等…
项目索引提交：
git commit
4.协作编程：
将本地repo于远程的origin的repo合并，
推送本地更新到远程：
git push origin master
更新远程更新到本地：
git pull origin master
补充：
添加远端repo：
$ git remote add upstream git://github.com/pjhyett/github-services.git
重命名远端repo：
$ git://github.com/pjhyett/github-services.git为“upstream”
